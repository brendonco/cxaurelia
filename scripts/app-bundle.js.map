{"version":3,"sources":["app.js","environment.js","globalconfig.js","main.js","login/AuthService.js","login/login.js","resources/index.js","employee/dashboard/dashboard.js","/Users/brendonco/GitHub/cxaurelia/src/app.html","/Users/brendonco/GitHub/cxaurelia/src/login/login.html","/Users/brendonco/GitHub/cxaurelia/src/employee/dashboard/dashboard.html"],"names":["App","AuthService","auth","configureRouter","config","router","addAuthorizeStep","AuthorizeStep","map","route","name","moduleId","settings","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","isAuthenticated","cancel","debug","testing","baseUrl","loginUrl","tokenName","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","Aurelia","HttpClient","session","http","withBaseUrl","app","JSON","parse","localStorage","login","username","password","post","response","content","stringify","logout","can","permission","Login","error","activate","Dashboard","inject"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\nimport AuthService from './login/AuthService';\nimport {Redirect} from 'aurelia-router';\n\n@inject(AuthService)\nexport class App {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n  configureRouter(config, router) {\n    config.addAuthorizeStep(AuthorizeStep);\n    config.map([\n      { route: ['', 'login'],       name: 'login',       moduleId: 'login/login' },\n      { route: 'dashboard',            name: 'dashboard',      moduleId: 'dashboard/dashboard', settings: { auth: true } }\n    ]);\n  }\n}\n\nclass AuthorizeStep {\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.auth)) {\n      var isLoggedIn = AuthorizeStep.isAuthenticated();// insert magic here;\n      if (!isLoggedIn) {\n        return next.cancel(new Redirect('login'));\n      }\n    }\n\n    return next();\n  }\n}","export default {\n  debug: true,\n  testing: true\n};\n","export default {\n    baseUrl: 'http://localhost:8080/',\n    loginUrl: 'api/1/user/login',\n    tokenName: 'ah12h3'\n};","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { Aurelia, inject } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-http-client';\nimport config from '../globalconfig';\n\n@inject(Aurelia, HttpClient)\nexport default class AuthService {\n\n    session = null\n\n    // As soon as the AuthService is created, we query local storage to\n    // see if the login information has been stored. If so, we immediately\n    // load it into the session object on the AuthService.\n    constructor(Aurelia, HttpClient) {\n        HttpClient.configure(http => {\n            http.withBaseUrl(config.baseUrl);\n        });\n\n        this.http = HttpClient;\n        this.app = Aurelia;\n\n        this.session = JSON.parse(localStorage[config.tokenName] || null);\n    }\n\n    login(username, password) {\n        this.http\n            .post(config.loginUrl, { username, password })\n            .then((response) => response.content)\n            .then((session) => {\n\n                // Save to localStorage\n                localStorage[config.tokenName] = JSON.stringify(session);\n\n                // .. and to the session object\n                this.session = session;\n\n                // .. and set root to app.\n                this.app.setRoot('app');\n            });\n    }\n\n    logout() {\n\n        // Clear from localStorage\n        localStorage[config.tokenName] = null;\n\n        // .. and from the session object\n        this.session = null;\n\n        // .. and set root to login.\n        this.app.setRoot('login')\n    }\n    \n    isAuthenticated() {\n        return this.session !== null;\n    }\n\n    can(permission) {\n        return true;\n    }\n}","import { inject } from 'aurelia-framework';\nimport AuthService from './AuthService';\n\n@inject(AuthService)\nexport class Login {\n\n  constructor(AuthService) {\n\n    // Or, if we want to add additional logic to the function, \n    // we can call it within another method on our view model.\n    this.login = () => {\n      if (this.username && this.password) {\n        AuthService.login(this.username, this.password)\n      } else {\n        this.error = 'Please enter a username and password.';\n      }\n    }\n  }\n\n  activate() {\n    this.username = '';\n    this.password = '';\n    this.error = '';\n  }\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n","import 'bootstrap';\nimport AuthService from '../../login/AuthService';\n\n@inject(AuthService)\nexport class Dashboard {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n}\n",null,null,null],"sourceRoot":"../src"}