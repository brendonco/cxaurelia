{"version":3,"sources":["app.js","environment.js","globalconfig.js","main.js","login/AuthService.js","login/login.js","resources/index.js","employee/dashboard/dashboard.js","employee/employee.js","login/index.js","/Users/brendonco/GitHub/cxaurelia/src/employee/wellness/wellness.js","/Users/brendonco/GitHub/cxaurelia/src/app.html","/Users/brendonco/GitHub/cxaurelia/src/login/login.html","/Users/brendonco/GitHub/cxaurelia/src/employee/dashboard/dashboard.html","/Users/brendonco/GitHub/cxaurelia/src/employee/employee.html","/Users/brendonco/GitHub/cxaurelia/src/login/index.html","/Users/brendonco/GitHub/cxaurelia/src/employee/wellness/wellness.html"],"names":["App","AuthService","auth","configureRouter","config","router","title","map","route","name","moduleId","nav","settings","mapUnknownRoutes","debug","testing","clientName","window","location","pathname","substring","baseUrl","loginUrl","tokenName","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","container","get","root","isAuthenticated","setRoot","Aurelia","HttpClient","session","http","withHeader","withBaseUrl","app","JSON","parse","localStorage","login","username","password","errorCallback","data","post","response","content","stringify","portal","defaultPage","clientConfig","defaultLandingPage","path","catch","stackTrace","err","status","statusCode","statusText","memberProfile","logout","can","permission","Login","error","activate","Dashboard","Employee","addAuthorizeStep","AuthorizeStep","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","cancel"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\nimport AuthService from './login/AuthService';\nimport {Redirect} from 'aurelia-router';\n\n@inject(AuthService)\nexport class App {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n  configureRouter(config, router) {\n    this.router = router;\n\n    config.title = 'CXA';\n    // remove hash from URL\n    // config.options.pushState = true;\n    // custom base tag\n    // config.options.root = '/';\n    // config.addAuthorizeStep(AuthorizeStep);\n    config.map([\n      { route: ['', 'login'], name: 'login',     moduleId: 'login/login', nav: false,  title: 'Login', settings: {auth: true}}\n    ]);\n\n    config.mapUnknownRoutes('login/login');\n  }\n}","export default {\n  debug: true,\n  testing: true\n};\n","var clientName = window.location.pathname.substring(1);\n\nexport default {\n    baseUrl: 'http://localhost:8080/',\n    loginUrl: 'api/1/user/login',\n    tokenName: 'ah12h3',\n    clientName: clientName\n};","import {$} from 'jquery';\nimport AuthService from './login/AuthService';\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => {\n    var auth = aurelia.container.get(AuthService);\n\n    let root = auth.isAuthenticated() ? 'app' : 'login/login';\n\n    aurelia.setRoot(root);\n  });\n}\n","import { Aurelia, inject } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-http-client';\nimport config from '../globalconfig';\n\n@inject(Aurelia, HttpClient)\nexport default class AuthService {\n\n    session = null\n\n    // As soon as the AuthService is created, we query local storage to\n    // see if the login information has been stored. If so, we immediately\n    // load it into the session object on the AuthService.\n    constructor(Aurelia, HttpClient) {\n        HttpClient.configure(http => {\n            http.withHeader('Content-Type', 'application/json');\n            http.withBaseUrl(config.baseUrl);\n        });\n\n        this.http = HttpClient;\n        this.app = Aurelia;\n\n        this.session = JSON.parse(localStorage[config.tokenName] || null);\n    }\n\n    login(username, password, errorCallback) {\n        var data = {\n            username: username,\n            password: password,\n            clientName: config.clientName\n        };\n\n        this.http\n            .post(config.loginUrl, data)\n            .then((response) => response.content)\n            .then((session) => {\n\n                // Save to localStorage\n                localStorage[config.tokenName] = JSON.stringify(session);\n\n                // .. and to the session object\n                this.session = session;\n\n                if(session.session.portal === 'employee'){\n                    var defaultPage = session.clientConfig.defaultLandingPage;\n                    var path = defaultPage + '/' + defaultPage;\n\n                    this.app.setRoot('./employee/' + path);\n                }else if(session.session.portal === 'broker'){\n                }else{\n                    // .. and set root to app.\n                    this.app.setRoot('./app');\n                }\n\n                \n            }).catch(err => {\n                if(errorCallback){\n                    errorCallback({\n                        stackTrace: err.response,\n                        status: err.statusCode,\n                        statusText: err.statusText\n                    });\n                }\n            });\n    }\n\n    memberProfile(){\n        if(isAuthenticated()){\n            return \n        }else{\n\n        }\n    }\n\n    logout() {\n\n        // Clear from localStorage\n        localStorage[config.tokenName] = null;\n\n        // .. and from the session object\n        this.session = null;\n\n        // .. and set root to login.\n        this.app.setRoot('./login/login')\n    }\n    \n    isAuthenticated() {\n        return this.session !== null;\n    }\n\n    can(permission) {\n        return true;\n    }\n}","import { inject } from 'aurelia-framework';\nimport AuthService from './AuthService';\n\n@inject(AuthService)\nexport class Login {\n\n  constructor(AuthService) {\n\n    // Or, if we want to add additional logic to the function, \n    // we can call it within another method on our view model.\n    this.login = () => {\n      if (this.username && this.password) {\n        AuthService.login(this.username, this.password, err => {\n          this.error = err;\n        });\n      } else {\n        this.error = 'Please enter a username and password.';\n      }\n    }\n  }\n\n  activate() {\n    this.username = '';\n    this.password = '';\n    this.error = '';\n  }\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n","import AuthService from '../../login/AuthService';\nimport { inject } from 'aurelia-framework';\n\n@inject(AuthService)\nexport class Dashboard {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n}\n","import { inject } from 'aurelia-framework';\nimport AuthService from '../login/AuthService';\nimport {Redirect} from 'aurelia-router';\n\n@inject(AuthService)\nexport class Employee {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n  configureRouter(config, router) {\n    this.router = router;\n\n    config.title = 'CXA';\n    // remove hash from URL\n    // config.options.pushState = true;\n    // custom base tag\n    // config.options.root = '/';\n    config.map([\n        { route: 'dashboard', name: 'dashboard', title: 'Dashboard', moduleId: 'employee/dashboard/dashboard', nav: true, settings: {'auth': true} }\n    ]);\n\n    config.addAuthorizeStep(AuthorizeStep);\n  }\n}\n\nclass AuthorizeStep {\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.auth)) {\n      var isLoggedIn = this.auth.isAuthenticated();\n      if (!isLoggedIn) {\n        return next.cancel(new Redirect('login'));\n      }\n    }\n\n    return next();\n  }\n}","import { inject } from 'aurelia-framework';\nimport AuthService from '../login/AuthService';\nimport {Redirect} from 'aurelia-router';\n\n@inject(AuthService)\nexport class Employee {\n  constructor(AuthService) {\n    this.auth = AuthService;\n  }\n  configureRouter(config, router) {\n    this.router = router;\n\n    config.title = 'CXA';\n    // remove hash from URL\n    // config.options.pushState = true;\n    // custom base tag\n    // config.options.root = '/';\n    config.map([\n        { route: ['dashboard', 'employee'], name: 'dashboard', title: 'Dashboard', moduleId: 'employee/dashboard/dashboard', nav: true, settings: {'auth': true} }\n    ]);\n\n    config.addAuthorizeStep(new AuthorizeStep);\n  }\n}\n\nclass AuthorizeStep {\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.auth)) {\n      var isLoggedIn = AuthorizeStep.isAuthenticated();\n\n      if (!isLoggedIn) {\n        return next.cancel(new Redirect('./login/login'));\n      }\n\n      // else{\n      //   return next.cancel(new Redirect('./employee/dashboard/dashboard'));\n      // }\n    }\n\n    return next();\n  }\n}",null,null,null,null,null,null,null],"sourceRoot":"../src"}